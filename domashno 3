1. Zad.
#include <iostream>

void RecursivePrinting(short n)
{
	if (n == 1)
	{
		std::cout << 1;
		return;
	}

	RecursivePrinting(n - 1);
	std::cout << n;
	RecursivePrinting(n - 1);
}

int main()
{
	short n;
	std::cin >> n;

	RecursivePrinting(n);
	std::cout << std::endl;

	return 0;
}

3. Zad.

#include <iostream>

bool isLetter(char symbol)
{
	return symbol >= 'a' && symbol <= 'z' || symbol >= 'A' && symbol <= 'Z';
}

void WordFlip(char *text, int wordStartIndex, int wordEndIndex, 
	int numberOfFlips, int wordLen)
{
	// creating a copy array
	char word[10001];
	for (int i = wordStartIndex; i <= wordEndIndex; i++)
		word[i] = text[i];

	// moving the first part of the word
	for (int i = 0; i < 
		wordLen - numberOfFlips; i++)
		text[i + numberOfFlips + wordStartIndex] = 
		word[i + wordStartIndex];

	// moving the second part of the word
	for (int i = 0; i < numberOfFlips; i++)
		text[wordStartIndex + i] = 
		word[i + wordEndIndex - numberOfFlips + 1];
}

int main()
{
	char text[10001];
	std::cin.getline(text, 10001);

	int n;
	std::cin >> n;
	
	int i = 0;

	do
	{
		while (!isLetter(text[i]) && text[i] != '\0') i++;
		if (text[i] == '\0') continue;
		int wordStartIndex = i++;

		while (isLetter(text[i]) || text[i] == '-'
			&& isLetter(text[i + 1])) i++;
		int wordEndIndex = i - 1;

		// number of flips without repetition
		int wordLen = wordEndIndex - wordStartIndex + 1;
		int numberOfFlips = n % wordLen;

		WordFlip(text, wordStartIndex, wordEndIndex, numberOfFlips, wordLen);

	} while (text[i] != '\0');

	std::cout << text << std::endl;

	return 0;
}
