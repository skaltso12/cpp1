1. Zad.
#include <iostream>

void RecursivePrinting(short n)
{
	if (n == 1)
	{
		std::cout << 1;
		return;
	}

	RecursivePrinting(n - 1);
	std::cout << n;
	RecursivePrinting(n - 1);
}

int main()
{
	short n;
	std::cin >> n;

	RecursivePrinting(n);
	std::cout << std::endl;

	return 0;
}

3. Zad.

#include <iostream>

bool isLetter(char symbol)
{
	return symbol >= 'a' && symbol <= 'z' || symbol >= 'A' && symbol <= 'Z';
}

void WordFlip(char *text, int wordStartIndex, int wordEndIndex, 
	int numberOfFlips, int wordLen)
{
	// creating a copy array
	char word[10001];
	for (int i = wordStartIndex; i <= wordEndIndex; i++)
		word[i] = text[i];

	// moving the first part of the word
	for (int i = 0; i < 
		wordLen - numberOfFlips; i++)
		text[i + numberOfFlips + wordStartIndex] = 
		word[i + wordStartIndex];

	// moving the second part of the word
	for (int i = 0; i < numberOfFlips; i++)
		text[wordStartIndex + i] = 
		word[i + wordEndIndex - numberOfFlips + 1];
}

int main()
{
	char text[10001];
	std::cin.getline(text, 10001);

	int n;
	std::cin >> n;
	
	int i = 0;

	do
	{
		while (!isLetter(text[i]) && text[i] != '\0') i++;
		if (text[i] == '\0') continue;
		int wordStartIndex = i++;

		while (isLetter(text[i]) || text[i] == '-'
			&& isLetter(text[i + 1])) i++;
		int wordEndIndex = i - 1;

		// number of flips without repetition
		int wordLen = wordEndIndex - wordStartIndex + 1;
		int numberOfFlips = n % wordLen;

		WordFlip(text, wordStartIndex, wordEndIndex, numberOfFlips, wordLen);

	} while (text[i] != '\0');

	std::cout << text << std::endl;

	return 0;
}

2. Zad. Nachenki

#include <iostream>

void RecursivePrinting(short *arrayNumbers, short number)
{
	short i = 0;
	while (arrayNumbers[i] >= arrayNumbers[i + 1] && i < number - 1) i++;
	if (i == number - 1)
	{
		std::cout << number << " = " << arrayNumbers[0];
		short j = 1;
		while (arrayNumbers[j] != 0 && j < number) 
		{
			std::cout << " + " << arrayNumbers[j];
			j++;
		}
		std::cout << std::endl;

		//for (int i = number - 1; i > 0; i--)
		//	if (arrayNumbers[i] == 1 || arrayNumbers[i] == 0 
		//		&& arrayNumbers[i - 1] != 0 && arrayNumbers[i - 1] != 1)
		//	{
		//		if (arrayNumbers[i - 1] != 1)
		//		{
		//			arrayNumbers[i - 1]--;
		//			arrayNumbers[i]++;
		//			RecursivePrinting(arrayNumbers, number);
		//		}
		//		return;
		//	}

		//arrayNumbers[0]--;
		//arrayNumbers[1]++;

		//RecursivePrinting(arrayNumbers, number);

		/*short startIndex;

		for (int i = number - 1; i > 0; i--)
			if (arrayNumbers[i] != 1 && arrayNumbers[i] != 0)
				startIndex = i;


		for (int k = 1; k < number; k++)
		{
			for (int j = startIndex; j < number / (number - k); j++)
			{
				arrayNumbers[j] = number - k;
			}
			arrayNumbers[number / (number - k)] = number % (number - k);
		}
		RecursivePrinting(arrayNumbers, number - 1);*/


	}
	return;

}

int main()
{
	short number;
	std::cin >> number;

	short arrayNumbers[32] = { number };

	RecursivePrinting(arrayNumbers, number);

	return 0;
}

7. Zad. 
#include <iostream>

bool isLetter(char symbol)
{
	return symbol >= 'a' && symbol <= 'z' || symbol >= 'A' && symbol <= 'Z';
}

bool isVowel(char symbol)
{
	return symbol == 'A' || symbol == 'a' ||
		symbol == 'E' || symbol == 'e' ||
		symbol == 'I' || symbol == 'i' ||
		symbol == 'O' || symbol == 'o' ||
		symbol == 'U' || symbol == 'u' ||
		symbol == 'Y' || symbol == 'y';
}

bool isLetterHigh(char letter)
{
	return  letter >= 'A' && letter <= 'Z';
}

void PigLatinTranslator(char *text, int wordStartIndex, int wordEndIndex)
{
	bool IsWordHigh = isLetterHigh(text[wordStartIndex])
		&& isLetterHigh(text[wordStartIndex + 1]);

	if (isVowel(text[wordStartIndex]))
	{
		for (int j = wordStartIndex; j <= wordEndIndex; j++)
			std::cout << text[j];

		if (IsWordHigh)
			std::cout << "WAY";
		else
			std::cout << "way";

		return;
	}


	int firstVowel = wordStartIndex + 1;

	while (!isVowel(text[firstVowel])) firstVowel++;

	if (isLetterHigh(text[wordStartIndex]) && !IsWordHigh)
	{
		text[firstVowel] = text[firstVowel] + ('A' - 'a');
		text[wordStartIndex] = text[wordStartIndex] - ('A' - 'a');
	}

	for (int k = firstVowel; k <= wordEndIndex; k++)
		std::cout << text[k];

	for (int p = wordStartIndex; p < firstVowel; p++)
		std::cout << text[p];

	if (IsWordHigh)
		std::cout << "AY";
	else
		std::cout << "ay";

}

int main()
{
	char text[10001];
	std::cin.getline(text, 10001);

	int i = 0;

	do
	{
		while (!isLetter(text[i]) && text[i] != '\0')
		{
			std::cout << text[i];
			i++;
		}
		if (text[i] == '\0') continue;
		int wordStartIndex = i++;

		while (isLetter(text[i])) i++;
		int wordEndIndex = i - 1;

		PigLatinTranslator(text, wordStartIndex, wordEndIndex);

	} while (text[i] != '\0');

	std::cout << std::endl;

	return 0;
}

8. Zad.
#include <iostream>

int main()
{
	const int maxElements = 99999;
	const short divider = 3;

	int arrayNumbers[maxElements];

	int n;
	std::cin >> n;

	for (int i = 0; i < n; i++)
		std::cin >> arrayNumbers[i];

	bool firstElement = false;

	for (int j = 0; j < divider; j++)
	{
		for (int i = 0; i < n; i++)
		{
			short remainder = arrayNumbers[i] % divider;
			if (remainder == j ||
				remainder == j - divider)
			{
				std::cout << (firstElement ? " " : "") << arrayNumbers[i];
				firstElement = true;
			}
		}
	}

	std::cout << std::endl;

	return 0;
}

5. Zad.
#include <iostream>

typedef const short numeralSystem;
numeralSystem decimal = 10;
numeralSystem hexademical = 16;
numeralSystem binary = 2;
numeralSystem octal = 8;

bool isPartOfNumber(char symbol)
{
	return symbol != ' ' && symbol != '+';
}

short digit(char symbol)
{
	switch (symbol)
	{
		case '0': return 0; 
		case '1': return 1;
		case '2': return 2;
		case '3': return 3;
		case '4': return 4;
		case '5': return 5;
		case '6': return 6;
		case '7': return 7;
		case '8': return 8;
		case '9': return 9;
		case 'A': return 10;
		case 'B': return 11;
		case 'C': return 12;
		case 'D': return 13;
		case 'E': return 14;
		case 'F': return 15;
	}
}

unsigned long long conversion(char *expression,
	int realNumberStartIndex, int numberEndIndex, 
	short const numeralSystem)
{
	unsigned long long result = 0;

	for (int i = numberEndIndex; i >= realNumberStartIndex; i--)
		result += digit(expression[i]) 
		* pow(numeralSystem, numberEndIndex - i);

	return result;
}

unsigned long long convertToDecimal(char *expression,
	int numberStartIndex, int numberEndIndex)
{
	short firstDigit = digit(expression[numberStartIndex]);

	if (numberStartIndex == numberEndIndex)
		return firstDigit;

	if (firstDigit != 0)
	{
		return conversion(expression, numberStartIndex,
			numberEndIndex, decimal);
	}

	char secondDigit = expression[numberStartIndex + 1];

	switch (secondDigit)
	{
		case 'b' : return conversion(expression, numberStartIndex + 2,
		numberEndIndex, binary);
		case 'x': return conversion(expression, numberStartIndex + 2,
			numberEndIndex, hexademical);
		default : return conversion(expression, numberStartIndex + 1,
			numberEndIndex, octal);
	}
}

int main()
{
	unsigned long long result = 0;
	
	const short maxLen = 1001;
	char expression[maxLen];
	std::cin.getline(expression, maxLen);

	int i = 0;

	do
	{
		while (!isPartOfNumber(expression[i]) && 
			expression[i] != '\0') i++;
		if (expression[i] == '\0') continue;
		int numberStartIndex = i++;

		while (isPartOfNumber(expression[i]) &&
			expression[i] != '\0') i++;
		int numberEndIndex = i - 1;

		result += convertToDecimal(expression, 
			numberStartIndex, numberEndIndex);

	} while (expression[i] != '\0');

	std::cout << result << std::endl;

	return 0;
}

6. Zad.
#include <iostream>

const int maxStudents = 1000; // ???
const short infoFields = 3;
const short firstColumn = 0;
const short secondColumn = 1;
const short firstRow = 0;

void InputArray(double arrayResults[][infoFields], unsigned numberRows)
{
	for (int i = 0; i < numberRows; i++)
		for (int j = 0; j < infoFields; j++)
			std::cin >> arrayResults[i][j];
}

void OutputArray(double arrayResults[][infoFields], unsigned numberRows)
{
	for (int i = 0; i < numberRows; i++)
	{
		for (int j = 0; j < infoFields; j++)
			std::cout << arrayResults[i][j] << " ";
		std::cout << std::endl;
	}
}

void Swap(double arrayResults[][infoFields], int swapRow1, int SwapRow2,
	int beginSwapColumn, int endSwapColumn)
{
	for (int i = beginSwapColumn; i < endSwapColumn; i++)
	{
		double temp = arrayResults[swapRow1][i];
		arrayResults[swapRow1][i] = arrayResults[SwapRow2][i];
		arrayResults[SwapRow2][i] = temp;
	}
}

int main()
{
	unsigned numberRows;
	std::cin >> numberRows;

	double arrayResults[maxStudents][infoFields];

	InputArray(arrayResults, numberRows);

	for (int i = firstRow; i < numberRows - 1; i++)
		for (int j = i + 1; j < numberRows; j++)

			if (arrayResults[i][firstColumn]
		> arrayResults[j][firstColumn])
				Swap(arrayResults, i, j, firstColumn, infoFields);

			else if (arrayResults[i][firstColumn]
				== arrayResults[j][firstColumn])
			{
				if (arrayResults[i][secondColumn]
					> arrayResults[j][secondColumn])
					Swap(arrayResults, i, j, secondColumn, infoFields);
			}

	OutputArray(arrayResults, numberRows);

	return 0;
}

9. Zad.
#include <iostream>

const int maxOffers = 60000; // max
const short infoFields = 4;
const short firstColumn = 0;
const short secondColumn = 1;
const short firstRow = 0;

void InputMatrix(int arrayOffers[][infoFields], unsigned numberOffers)
{
	for (int i = 0; i < numberOffers; i++)
		for (int j = 0; j < infoFields; j++)
			std::cin >> arrayOffers[i][j];
}

void InputArray(int *arrayMin, int infoFieldsMin)
{
	for (int i = 0; i < infoFieldsMin; i++)
		std::cin >> arrayMin[i];
}

void Swap(int arrayOffers[][infoFields], int swapRow1, int SwapRow2,
	int beginSwapColumn, int endSwapColumn)
{
	for (int i = beginSwapColumn; i < endSwapColumn; i++)
	{
		double temp = arrayOffers[swapRow1][i];
		arrayOffers[swapRow1][i] = arrayOffers[SwapRow2][i];
		arrayOffers[SwapRow2][i] = temp;
	}
}

int main()
{
	unsigned numberOffers;
	std::cin >> numberOffers;

	int arrayOffers[maxOffers][infoFields];
	int arrayMin[infoFields - 1]; // without the price

	InputMatrix(arrayOffers, numberOffers);
	InputArray(arrayMin, infoFields - 1);

	// organizing offers
	for (int i = firstRow; i < numberOffers - 1; i++)
		for (int j = i + 1; j < numberOffers; j++)

			if (arrayOffers[i][firstColumn]
		> arrayOffers[j][firstColumn])
			{
				for (int k = i + 1; k < numberOffers; k++)
					if (arrayOffers[i][firstColumn] ==
						arrayOffers[k][firstColumn] && k < j)
					{
						Swap(arrayOffers, i, k, firstColumn, infoFields);
					}
				Swap(arrayOffers, i, j, firstColumn, infoFields);
			}

	bool anyOfferEnough = false;

	//printing the right offers
	for (int i = firstRow; i < numberOffers; i++)
	{
		bool isOfferEnough = true;
		bool pricePrint = false;

		for (int j = secondColumn; j < infoFields; j++)
			if (arrayOffers[i][j] < arrayMin[j - 1])
			{
				j += infoFields;
				isOfferEnough = false;
			}

		if (isOfferEnough)
		{
			anyOfferEnough = true;
			for (int k = firstRow; k < infoFields; k++)
			{
				if (pricePrint) std::cout << " ";
				std::cout << arrayOffers[i][k];
				pricePrint = true;
			}
			std::cout << std::endl;
		}
	}

	if (!anyOfferEnough) std::cout << "No solution" << std::endl;

	return 0;
}
